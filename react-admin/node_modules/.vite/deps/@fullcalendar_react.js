import {
  require_react_dom
} from "./chunk-PCIQHYS3.js";
import {
  require_react
} from "./chunk-4SFRXV4X.js";
import "./chunk-ULJGACYD.js";
import {
  Calendar,
  CustomRenderingStore
} from "./chunk-XG2RQPAQ.js";
import {
  __toESM
} from "./chunk-J43GMYXM.js";

// node_modules/@fullcalendar/react/dist/index.js
var import_react = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());
var FullCalendar = class extends import_react.Component {
  constructor() {
    super(...arguments);
    this.elRef = (0, import_react.createRef)();
    this.needCustomRenderingResize = false;
    this.state = {
      customRenderingMap: /* @__PURE__ */ new Map()
    };
  }
  render() {
    const portalNodes = [];
    for (const customRendering of this.state.customRenderingMap.values()) {
      const { generatorMeta } = customRendering;
      const vnode = typeof generatorMeta === "function" ? generatorMeta(customRendering.renderProps) : generatorMeta;
      portalNodes.push((0, import_react_dom.createPortal)(vnode, customRendering.containerEl, customRendering.id));
    }
    return import_react.default.createElement("div", { ref: this.elRef }, portalNodes);
  }
  componentDidMount() {
    const customRenderingStore = new CustomRenderingStore();
    this.calendar = new Calendar(this.elRef.current, Object.assign(Object.assign({}, this.props), { handleCustomRendering: customRenderingStore.handle.bind(customRenderingStore), customRenderingMetaMap: this.props }));
    this.calendar.render();
    customRenderingStore.subscribe((customRenderingMap) => {
      this.needCustomRenderingResize = true;
      this.setState({ customRenderingMap });
    });
  }
  componentDidUpdate(prevProps) {
    const updates = computeUpdates(prevProps, this.props);
    if (Object.keys(updates).length) {
      this.calendar.resetOptions(updates, true);
    }
    if (this.needCustomRenderingResize) {
      this.needCustomRenderingResize = false;
      this.calendar.updateSize();
    }
  }
  componentWillUnmount() {
    this.calendar.destroy();
  }
  getApi() {
    return this.calendar;
  }
};
function computeUpdates(origObj, newObj) {
  const updates = {};
  if (newObj !== origObj) {
    for (const key in newObj) {
      if (newObj[key] !== origObj[key]) {
        updates[key] = newObj[key];
      }
    }
  }
  return updates;
}
export {
  FullCalendar as default
};
//# sourceMappingURL=@fullcalendar_react.js.map
