{
  "version": 3,
  "sources": ["../../@fullcalendar/react/src/index.tsx"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { Component, createRef, ReactPortal } from 'react'\nimport { createPortal } from 'react-dom'\nimport {\n  CalendarOptions,\n  CalendarApi,\n  Calendar,\n} from '@fullcalendar/core'\nimport {\n  CustomRendering,\n  CustomRenderingStore,\n} from '@fullcalendar/core/internal'\n\ninterface CalendarState {\n  customRenderingMap: Map<string, CustomRendering<any>>\n}\n\nexport default class FullCalendar extends Component<CalendarOptions, CalendarState> {\n  private elRef = createRef<HTMLDivElement>()\n  private calendar: Calendar\n  private needCustomRenderingResize = false\n\n  state: CalendarState = {\n    customRenderingMap: new Map<string, CustomRendering<any>>()\n  }\n\n  render() {\n    const portalNodes: ReactPortal[] = []\n\n    for (const customRendering of this.state.customRenderingMap.values()) {\n      const { generatorMeta } = customRendering\n      const vnode = typeof generatorMeta === 'function' ?\n        generatorMeta(customRendering.renderProps) :\n        generatorMeta\n\n      portalNodes.push(\n        createPortal(\n          vnode,\n          customRendering.containerEl,\n          customRendering.id, // key\n        )\n      )\n    }\n\n    return (\n      <div ref={this.elRef}>\n        {portalNodes}\n      </div>\n    )\n  }\n\n  componentDidMount() {\n    const customRenderingStore = new CustomRenderingStore<unknown>()\n\n    this.calendar = new Calendar(this.elRef.current, {\n      ...this.props,\n      handleCustomRendering: customRenderingStore.handle.bind(customRenderingStore),\n      customRenderingMetaMap: this.props, // render functions are given as props\n    })\n\n    this.calendar.render()\n    customRenderingStore.subscribe((customRenderingMap) => {\n      this.needCustomRenderingResize = true\n      this.setState({ customRenderingMap })\n    })\n  }\n\n  componentDidUpdate(prevProps: CalendarOptions) {\n    const updates = computeUpdates(prevProps, this.props)\n\n    if (Object.keys(updates).length) {\n      this.calendar.resetOptions(updates, true)\n    }\n\n    if (this.needCustomRenderingResize) {\n      this.needCustomRenderingResize = false\n      this.calendar.updateSize()\n    }\n  }\n\n  componentWillUnmount() {\n    this.calendar.destroy()\n  }\n\n  getApi(): CalendarApi {\n    return this.calendar\n  }\n}\n\n// Utils\n\nfunction computeUpdates(origObj: any, newObj: any): any {\n  const updates: any = {}\n\n  if (newObj !== origObj) {\n    for (const key in newObj) {\n      if (newObj[key] !== origObj[key]) {\n        updates[key] = newObj[key]\n      }\n    }\n  }\n\n  return updates\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;AACA,mBAAyD;AACzD,uBAA6B;AAe7B,IAAqB,eAArB,cAA0C,uBAAyC;EAAnF,cAAA;;AACU,SAAA,YAAQ,wBAAS;AAEjB,SAAA,4BAA4B;AAEpC,SAAA,QAAuB;MACrB,oBAAoB,oBAAI,IAAG;;EAgE/B;EA7DE,SAAM;AACJ,UAAM,cAA6B,CAAA;AAEnC,eAAW,mBAAmB,KAAK,MAAM,mBAAmB,OAAM,GAAI;AACpE,YAAM,EAAE,cAAa,IAAK;AAC1B,YAAM,QAAQ,OAAO,kBAAkB,aACrC,cAAc,gBAAgB,WAAW,IACzC;AAEF,kBAAY,SACV,+BACE,OACA,gBAAgB,aAChB,gBAAgB,EAAE,CACnB;;AAIL,WACE,aAAAA,QAAA,cAAA,OAAA,EAAK,KAAK,KAAK,MAAK,GACjB,WAAW;EAGlB;EAEA,oBAAiB;AACf,UAAM,uBAAuB,IAAI,qBAAoB;AAErD,SAAK,WAAW,IAAI,SAAS,KAAK,MAAM,SAAO,OAAA,OAAA,OAAA,OAAA,CAAA,GAC1C,KAAK,KAAK,GAAA,EACb,uBAAuB,qBAAqB,OAAO,KAAK,oBAAoB,GAC5E,wBAAwB,KAAK,MAAK,CAAA,CAAA;AAGpC,SAAK,SAAS,OAAM;AACpB,yBAAqB,UAAU,CAAC,uBAAsB;AACpD,WAAK,4BAA4B;AACjC,WAAK,SAAS,EAAE,mBAAkB,CAAE;IACtC,CAAC;EACH;EAEA,mBAAmB,WAA0B;AAC3C,UAAM,UAAU,eAAe,WAAW,KAAK,KAAK;AAEpD,QAAI,OAAO,KAAK,OAAO,EAAE,QAAQ;AAC/B,WAAK,SAAS,aAAa,SAAS,IAAI;;AAG1C,QAAI,KAAK,2BAA2B;AAClC,WAAK,4BAA4B;AACjC,WAAK,SAAS,WAAU;;EAE5B;EAEA,uBAAoB;AAClB,SAAK,SAAS,QAAO;EACvB;EAEA,SAAM;AACJ,WAAO,KAAK;EACd;;AAKF,SAAS,eAAe,SAAc,QAAW;AAC/C,QAAM,UAAe,CAAA;AAErB,MAAI,WAAW,SAAS;AACtB,eAAW,OAAO,QAAQ;AACxB,UAAI,OAAO,SAAS,QAAQ,MAAM;AAChC,gBAAQ,OAAO,OAAO;;;;AAK5B,SAAO;AACT;",
  "names": ["React"]
}
